{"ast":null,"code":"import * as THREE from 'three';\n\nconst _instanceLocalMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceWorldMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/new THREE.Mesh();\n\nclass Position extends THREE.Group {\n  constructor() {\n    super();\n    this.color = new THREE.Color('white');\n    this.instance = {\n      current: undefined\n    };\n    this.instanceKey = {\n      current: undefined\n    };\n  } // This will allow the virtual instance have bounds\n\n\n  get geometry() {\n    var _this$instance$curren;\n\n    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n  } // And this will allow the virtual instance to receive events\n\n\n  raycast(raycaster, intersects) {\n    const parent = this.instance.current;\n    if (!parent) return;\n    if (!parent.geometry || !parent.material) return;\n    _mesh.geometry = parent.geometry;\n    const matrixWorld = parent.matrixWorld;\n    let instanceId = parent.userData.instances.indexOf(this.instanceKey);\n    if (instanceId === -1) return; // calculate the world matrix for each instance\n\n    parent.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n    _mesh.matrixWorld = _instanceWorldMatrix;\n\n    _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n      const intersect = _instanceIntersects[i];\n      intersect.instanceId = instanceId;\n      intersect.object = this;\n      intersects.push(intersect);\n    }\n\n    _instanceIntersects.length = 0;\n  }\n\n}\n\nexport { Position };","map":{"version":3,"sources":["/Users/charlie/Desktop/SneakViz/node_modules/@react-three/drei/helpers/Position.js"],"names":["THREE","_instanceLocalMatrix","Matrix4","_instanceWorldMatrix","_instanceIntersects","_mesh","Mesh","Position","Group","constructor","color","Color","instance","current","undefined","instanceKey","geometry","_this$instance$curren","raycast","raycaster","intersects","parent","material","matrixWorld","instanceId","userData","instances","indexOf","getMatrixAt","multiplyMatrices","i","l","length","intersect","object","push"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,MAAMC,oBAAoB,GAAG,aAAa,IAAID,KAAK,CAACE,OAAV,EAA1C;;AAEA,MAAMC,oBAAoB,GAAG,aAAa,IAAIH,KAAK,CAACE,OAAV,EAA1C;;AAEA,MAAME,mBAAmB,GAAG,EAA5B;;AAEA,MAAMC,KAAK,GAAG,aAAa,IAAIL,KAAK,CAACM,IAAV,EAA3B;;AAEA,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,KAA7B,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa,IAAIV,KAAK,CAACW,KAAV,CAAgB,OAAhB,CAAb;AACA,SAAKC,QAAL,GAAgB;AACdC,MAAAA,OAAO,EAAEC;AADK,KAAhB;AAGA,SAAKC,WAAL,GAAmB;AACjBF,MAAAA,OAAO,EAAEC;AADQ,KAAnB;AAGD,GAVgC,CAU/B;;;AAGU,MAARE,QAAQ,GAAG;AACb,QAAIC,qBAAJ;;AAEA,WAAO,CAACA,qBAAqB,GAAG,KAAKL,QAAL,CAAcC,OAAvC,KAAmD,IAAnD,GAA0D,KAAK,CAA/D,GAAmEI,qBAAqB,CAACD,QAAhG;AACD,GAjBgC,CAiB/B;;;AAGFE,EAAAA,OAAO,CAACC,SAAD,EAAYC,UAAZ,EAAwB;AAC7B,UAAMC,MAAM,GAAG,KAAKT,QAAL,CAAcC,OAA7B;AACA,QAAI,CAACQ,MAAL,EAAa;AACb,QAAI,CAACA,MAAM,CAACL,QAAR,IAAoB,CAACK,MAAM,CAACC,QAAhC,EAA0C;AAC1CjB,IAAAA,KAAK,CAACW,QAAN,GAAiBK,MAAM,CAACL,QAAxB;AACA,UAAMO,WAAW,GAAGF,MAAM,CAACE,WAA3B;AACA,QAAIC,UAAU,GAAGH,MAAM,CAACI,QAAP,CAAgBC,SAAhB,CAA0BC,OAA1B,CAAkC,KAAKZ,WAAvC,CAAjB;AACA,QAAIS,UAAU,KAAK,CAAC,CAApB,EAAuB,OAPM,CAOE;;AAE/BH,IAAAA,MAAM,CAACO,WAAP,CAAmBJ,UAAnB,EAA+BvB,oBAA/B;;AAEAE,IAAAA,oBAAoB,CAAC0B,gBAArB,CAAsCN,WAAtC,EAAmDtB,oBAAnD,EAX6B,CAW6C;;;AAG1EI,IAAAA,KAAK,CAACkB,WAAN,GAAoBpB,oBAApB;;AAEAE,IAAAA,KAAK,CAACa,OAAN,CAAcC,SAAd,EAAyBf,mBAAzB,EAhB6B,CAgBkB;;;AAG/C,SAAK,IAAI0B,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG3B,mBAAmB,CAAC4B,MAAxC,EAAgDF,CAAC,GAAGC,CAApD,EAAuDD,CAAC,EAAxD,EAA4D;AAC1D,YAAMG,SAAS,GAAG7B,mBAAmB,CAAC0B,CAAD,CAArC;AACAG,MAAAA,SAAS,CAACT,UAAV,GAAuBA,UAAvB;AACAS,MAAAA,SAAS,CAACC,MAAV,GAAmB,IAAnB;AACAd,MAAAA,UAAU,CAACe,IAAX,CAAgBF,SAAhB;AACD;;AAED7B,IAAAA,mBAAmB,CAAC4B,MAApB,GAA6B,CAA7B;AACD;;AA/CgC;;AAmDnC,SAASzB,QAAT","sourcesContent":["import * as THREE from 'three';\n\nconst _instanceLocalMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceWorldMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/new THREE.Mesh();\n\nclass Position extends THREE.Group {\n  constructor() {\n    super();\n    this.color = new THREE.Color('white');\n    this.instance = {\n      current: undefined\n    };\n    this.instanceKey = {\n      current: undefined\n    };\n  } // This will allow the virtual instance have bounds\n\n\n  get geometry() {\n    var _this$instance$curren;\n\n    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n  } // And this will allow the virtual instance to receive events\n\n\n  raycast(raycaster, intersects) {\n    const parent = this.instance.current;\n    if (!parent) return;\n    if (!parent.geometry || !parent.material) return;\n    _mesh.geometry = parent.geometry;\n    const matrixWorld = parent.matrixWorld;\n    let instanceId = parent.userData.instances.indexOf(this.instanceKey);\n    if (instanceId === -1) return; // calculate the world matrix for each instance\n\n    parent.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n    _mesh.matrixWorld = _instanceWorldMatrix;\n\n    _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n      const intersect = _instanceIntersects[i];\n      intersect.instanceId = instanceId;\n      intersect.object = this;\n      intersects.push(intersect);\n    }\n\n    _instanceIntersects.length = 0;\n  }\n\n}\n\nexport { Position };\n"]},"metadata":{},"sourceType":"module"}