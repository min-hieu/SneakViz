{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GastRefResolverVisitor = exports.resolveGrammar = void 0;\n\nvar parser_1 = require(\"../parser/parser\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar gast_visitor_public_1 = require(\"./gast/gast_visitor_public\");\n\nfunction resolveGrammar(topLevels, errMsgProvider) {\n  var refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexports.resolveGrammar = resolveGrammar;\n\nvar GastRefResolverVisitor =\n/** @class */\nfunction (_super) {\n  __extends(GastRefResolverVisitor, _super);\n\n  function GastRefResolverVisitor(nameToTopRule, errMsgProvider) {\n    var _this = _super.call(this) || this;\n\n    _this.nameToTopRule = nameToTopRule;\n    _this.errMsgProvider = errMsgProvider;\n    _this.errors = [];\n    return _this;\n  }\n\n  GastRefResolverVisitor.prototype.resolveRefs = function () {\n    var _this = this;\n\n    (0, utils_1.forEach)((0, utils_1.values)(this.nameToTopRule), function (prod) {\n      _this.currTopLevel = prod;\n      prod.accept(_this);\n    });\n  };\n\n  GastRefResolverVisitor.prototype.visitNonTerminal = function (node) {\n    var ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      var msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n      this.errors.push({\n        message: msg,\n        type: parser_1.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  };\n\n  return GastRefResolverVisitor;\n}(gast_visitor_public_1.GAstVisitor);\n\nexports.GastRefResolverVisitor = GastRefResolverVisitor;","map":{"version":3,"sources":["/Users/charlie/Desktop/SneakViz/node_modules/chevrotain/src/parse/grammar/resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAIA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,qBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAMA,SAAgB,cAAhB,CACE,SADF,EAEE,cAFF,EAEsD;AAEpD,MAAM,WAAW,GAAG,IAAI,sBAAJ,CAA2B,SAA3B,EAAsC,cAAtC,CAApB;AACA,EAAA,WAAW,CAAC,WAAZ;AACA,SAAO,WAAW,CAAC,MAAnB;AACD;;AAPD,OAAA,CAAA,cAAA,GAAA,cAAA;;AASA,IAAA,sBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4C,EAAA,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;;AAI1C,WAAA,sBAAA,CACU,aADV,EAEU,cAFV,EAE8D;AAF9D,QAAA,KAAA,GAIE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAJT;;AACU,IAAA,KAAA,CAAA,aAAA,GAAA,aAAA;AACA,IAAA,KAAA,CAAA,cAAA,GAAA,cAAA;AALH,IAAA,KAAA,CAAA,MAAA,GAAgD,EAAhD;;AAQN;;AAEM,EAAA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,KAAA,GAAA,OAAA,CAAA,OAAA,EAAQ,CAAA,GAAA,OAAA,CAAA,MAAA,EAAO,KAAK,aAAZ,CAAR,EAAoC,UAAC,IAAD,EAAK;AACvC,MAAA,KAAI,CAAC,YAAL,GAAoB,IAApB;AACA,MAAA,IAAI,CAAC,MAAL,CAAY,KAAZ;AACD,KAHD;AAID,GALM;;AAOA,EAAA,sBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,IAAxB,EAAyC;AACvC,QAAM,GAAG,GAAG,KAAK,aAAL,CAAmB,IAAI,CAAC,eAAxB,CAAZ;;AAEA,QAAI,CAAC,GAAL,EAAU;AACR,UAAM,GAAG,GAAG,KAAK,cAAL,CAAoB,sBAApB,CACV,KAAK,YADK,EAEV,IAFU,CAAZ;AAIA,WAAK,MAAL,CAAY,IAAZ,CAAiB;AACf,QAAA,OAAO,EAAE,GADM;AAEf,QAAA,IAAI,EAAE,QAAA,CAAA,yBAAA,CAA0B,sBAFjB;AAGf,QAAA,QAAQ,EAAE,KAAK,YAAL,CAAkB,IAHb;AAIf,QAAA,iBAAiB,EAAE,IAAI,CAAC;AAJT,OAAjB;AAMD,KAXD,MAWO;AACL,MAAA,IAAI,CAAC,cAAL,GAAsB,GAAtB;AACD;AACF,GAjBM;;AAkBT,SAAA,sBAAA;AAAC,CApCD,CAA4C,qBAAA,CAAA,WAA5C,CAAA;;AAAa,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourcesContent":["import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType\n} from \"../parser/parser\"\nimport { forEach, values } from \"@chevrotain/utils\"\nimport { NonTerminal, Rule } from \"./gast/gast_public\"\nimport { GAstVisitor } from \"./gast/gast_visitor_public\"\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError\n} from \"./types\"\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider)\n  refResolver.resolveRefs()\n  return refResolver.errors\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = []\n  private currTopLevel: Rule\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider\n  ) {\n    super()\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod\n      prod.accept(this)\n    })\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName]\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node\n      )\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName\n      })\n    } else {\n      node.referencedRule = ref\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}