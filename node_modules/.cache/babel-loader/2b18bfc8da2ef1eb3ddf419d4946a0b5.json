{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestWalker = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar gast_public_1 = require(\"./gast/gast_public\");\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\n\n\nvar RestWalker =\n/** @class */\nfunction () {\n  function RestWalker() {}\n\n  RestWalker.prototype.walk = function (prod, prevRest) {\n    var _this = this;\n\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n\n    (0, utils_1.forEach)(prod.definition, function (subProd, index) {\n      var currRest = (0, utils_1.drop)(prod.definition, index + 1);\n      /* istanbul ignore else */\n\n      if (subProd instanceof gast_public_1.NonTerminal) {\n        _this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Terminal) {\n        _this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternative) {\n        _this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Option) {\n        _this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatory) {\n        _this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n        _this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionWithSeparator) {\n        _this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Repetition) {\n        _this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternation) {\n        _this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  };\n\n  RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {};\n\n  RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {};\n\n  RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {\n    // ABCDEF => after the D the rest is EF\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, fullOrRest);\n  };\n\n  RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, fullOrRest);\n  };\n\n  RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    var fullAtLeastOneRest = [new gast_public_1.Option({\n      definition: atLeastOneProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  };\n\n  RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  };\n\n  RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    var fullManyRest = [new gast_public_1.Option({\n      definition: manyProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(manyProd, fullManyRest);\n  };\n\n  RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n    this.walk(manySepProd, fullManySepRest);\n  };\n\n  RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {\n    var _this = this; // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n\n\n    var fullOrRest = currRest.concat(prevRest); // walk all different alternatives\n\n    (0, utils_1.forEach)(orProd.definition, function (alt) {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      var prodWrapper = new gast_public_1.Alternative({\n        definition: [alt]\n      });\n\n      _this.walk(prodWrapper, fullOrRest);\n    });\n  };\n\n  return RestWalker;\n}();\n\nexports.RestWalker = RestWalker;\n\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  var repSepRest = [new gast_public_1.Option({\n    definition: [new gast_public_1.Terminal({\n      terminalType: repSepProd.separator\n    })].concat(repSepProd.definition)\n  })];\n  var fullRepSepRest = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}","map":{"version":3,"sources":["/Users/charlie/Desktop/SneakViz/node_modules/chevrotain/src/parse/grammar/rest.ts"],"names":[],"mappings":"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","sourcesContent":["import { drop, forEach } from \"@chevrotain/utils\"\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal\n} from \"./gast/gast_public\"\nimport { IProduction } from \"@chevrotain/types\"\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: AbstractProduction, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1)\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest)\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest)\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest)\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest)\n      } else {\n        throw Error(\"non exhaustive match\")\n      }\n    })\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(flatProd, <any>fullOrRest)\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(optionProd, <any>fullOrRest)\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(atLeastOneProd, fullAtLeastOneRest)\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest)\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(manyProd, fullManyRest)\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(manySepProd, fullManySepRest)\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest)\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] })\n      this.walk(prodWrapper, <any>fullOrRest)\n    })\n  }\n}\n\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  const repSepRest = [\n    new Option({\n      definition: [new Terminal({ terminalType: repSepProd.separator })].concat(\n        repSepProd.definition\n      )\n    })\n  ]\n  const fullRepSepRest: IProduction[] = repSepRest.concat(\n    <any>currRest,\n    <any>prevRest\n  )\n  return fullRepSepRest\n}\n"]},"metadata":{},"sourceType":"script"}